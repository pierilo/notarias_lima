# -*- coding: utf-8 -*-
import random
import math
import pandas as pd
import geopandas as gpd
import folium
from folium import GeoJson, GeoJsonTooltip
from folium.plugins import Fullscreen
from shapely.geometry import Point
from shapely.ops import unary_union
from unidecode import unidecode
from branca.colormap import StepColormap

# ========= RUTAS =========
EXCEL_PATH = r"C:\Users\pieri\Downloads\DATOS\notarias.xlsx"
SHEET_NAME = "Hoja1"
GEO_PATH   = r"C:\Users\pieri\Downloads\DATOS\peru_distrital_simple.geojson"
SALIDA_HTML = "mapa_notarias_lima.html"
JITTER_MAX_METROS = 350
# ========================

# --- Helpers ---
def normalize_txt(s):
    if pd.isna(s): return ""
    return unidecode(str(s).strip().upper())

def ensure_wgs84(gdf):
    if gdf.crs is None: return gdf
    if gdf.crs.to_epsg() != 4326: gdf = gdf.to_crs(epsg=4326)
    return gdf

def meters_to_degrees(lat, meters):
    deg_lat = meters / 111_320.0
    deg_lon = meters / (111_320.0 * max(0.1, abs(math.cos(math.radians(lat)))))
    return deg_lat, deg_lon

def jitter_point_within(poly, max_meters=300, tries=40):
    c = poly.representative_point()
    lat0, lon0 = c.y, c.x
    dlat, dlon = meters_to_degrees(lat0, max_meters)
    for _ in range(tries):
        lat = lat0 + random.uniform(-dlat, dlat) * 0.6
        lon = lon0 + random.uniform(-dlon, dlon) * 0.6
        p = Point(lon, lat)
        if poly.contains(p): return p
    return c

def guess_col(gdf, opts):
    cols = {c.lower(): c for c in gdf.columns}
    for o in opts:
        if o.lower() in cols: return cols[o.lower()]
    return None

# ========== Capa distrital ==========
gdf = gpd.read_file(GEO_PATH)
gdf = ensure_wgs84(gdf)

COL_DIST_GEO = guess_col(gdf, ["DISTRITO","NOMBDIST","NOM_DIST","DIST_NOMB","NOMB_DIST"])
COL_PROV_GEO = guess_col(gdf, ["PROVINCIA","PROV_NOMB","NOM_PROV","PROVINCIA_"])
COL_DPTO_GEO = guess_col(gdf, ["DEPARTAMENTO","DEPARTAMEN","DPTO","DEPARTAM","DEPARTAM_"])

if COL_DIST_GEO is None:
    raise ValueError("No se hall√≥ columna de distrito en la capa geogr√°fica.")

# Normalizar textos si existen
for c in [COL_DIST_GEO, COL_PROV_GEO, COL_DPTO_GEO]:
    if c in gdf.columns:
        gdf[c+"_N"] = gdf[c].apply(normalize_txt)

# ‚ö†Ô∏è SOLO Provincia de LIMA (no CALLAO)
mask = pd.Series([True]*len(gdf))
if (COL_DPTO_GEO and COL_PROV_GEO and (COL_DPTO_GEO+"_N" in gdf) and (COL_PROV_GEO+"_N" in gdf)):
    mask &= gdf[COL_DPTO_GEO+"_N"].eq("LIMA") & gdf[COL_PROV_GEO+"_N"].eq("LIMA")
elif COL_PROV_GEO and (COL_PROV_GEO+"_N" in gdf):
    mask &= gdf[COL_PROV_GEO+"_N"].eq("LIMA")
elif COL_DPTO_GEO and (COL_DPTO_GEO+"_N" in gdf):
    mask &= gdf[COL_DPTO_GEO+"_N"].eq("LIMA")  # (si tu archivo no trae provincia)

gdf_lima = gdf[mask].copy()
gdf_lima = gdf_lima[gdf_lima.geometry.notnull()].copy()
# Reparar geometr√≠as
gdf_lima["geometry"] = gdf_lima.buffer(0)
gdf_lima = gdf_lima[gdf_lima.geometry.notnull() & (~gdf_lima.geometry.is_empty)].copy()

gdf_lima["DIST_N"] = gdf_lima[COL_DIST_GEO].apply(normalize_txt)

# Centro del mapa (fallback seguro)
try:
    union_geom = unary_union(gdf_lima.geometry)
    centro = union_geom.representative_point()
    lat_c, lon_c = centro.y, centro.x
except Exception:
    lat_c, lon_c = -12.0464, -77.0428  # Plaza Mayor de Lima

# √çndice distrito -> pol√≠gono (Provincia Lima)
dist_to_poly = {r["DIST_N"]: r.geometry for _, r in gdf_lima.iterrows()}

# ========== Tu Excel ==========
df = pd.read_excel(EXCEL_PATH, sheet_name=SHEET_NAME)

COL_APE1 = "Primer Apellido"
COL_APE2 = "Segundo Apellido"
COL_NOMB = "Nombre"
COL_REGION = "Region"
COL_PROV  = "PROVINCIA"
COL_DIST  = "Distrito"
COL_DIR   = "DIRECCI√ìN DEL OFICIO NOTARIAL"

df["_REG_N"]  = df[COL_REGION].apply(normalize_txt)
df["_PROV_N"] = df[COL_PROV].apply(normalize_txt)
df["_DIST_N"] = df[COL_DIST].apply(normalize_txt)

# ‚ö†Ô∏è SOLO Regi√≥n=LIMA y Provincia=LIMA
df_lm = df[(df["_REG_N"].eq("LIMA")) & (df["_PROV_N"].eq("LIMA"))].copy()

def arma_nombre(r):
    p1 = str(r.get(COL_APE1,"") or "").strip()
    p2 = str(r.get(COL_APE2,"") or "").strip()
    nm = str(r.get(COL_NOMB,"") or "").strip()
    base = " ".join([p1, p2, nm]).strip()
    return base if base else "Notar√≠a"

df_lm["nombre_mostrar"] = df_lm.apply(arma_nombre, axis=1)
df_lm["direccion"] = df_lm[COL_DIR].fillna("")

# ‚ö†Ô∏è Mantener solo distritos presentes en la capa de Provincia Lima
df_lm = df_lm[df_lm["_DIST_N"].isin(dist_to_poly.keys())].copy()

# ====== Conteo de notar√≠as por distrito (Provincia Lima) ======
conteo = df_lm.groupby("_DIST_N").size().rename("N_Notarias").reset_index()
conteo_csv = conteo.rename(columns={"_DIST_N": "Distrito"})
conteo_csv = conteo_csv.sort_values("N_Notarias", ascending=False)
conteo_csv.to_csv("conteo_notarias_lima.csv", index=False, encoding="utf-8-sig")

print("\nüìä Conteo de notar√≠as por distrito (Provincia Lima):")
print(conteo_csv.to_string(index=False))

# ====== Unir conteo a la capa para pintar ======
gdf_plot = gdf_lima.merge(conteo, left_on="DIST_N", right_on="_DIST_N", how="left")
gdf_plot["N_Notarias"] = gdf_plot["N_Notarias"].fillna(0).astype(int)

# ====== Coordenadas dentro del distrito (para casitas) ======
lats, lons = [], []
for _, r in df_lm.iterrows():
    poly = dist_to_poly[r["_DIST_N"]]
    p = jitter_point_within(poly, max_meters=JITTER_MAX_METROS)
    lats.append(p.y); lons.append(p.x)
df_lm["lat"] = lats
df_lm["lon"] = lons

# ========== Mapa ==========
m = folium.Map(location=[lat_c, lon_c], zoom_start=11, tiles="CartoDB positron")
Fullscreen(position="topright").add_to(m)

# ---- Coropleta por # de notar√≠as + leyenda ----
max_n = int(gdf_plot["N_Notarias"].max())
bins = [0, 1, 3, 6, 10, max(12, max_n)]
bins = sorted(set(bins))
if len([b for b in bins if b <= max_n]) < 3:
    bins = [0, 1, 2, max(3, max_n)]

cmap = StepColormap(
    colors=["#f7fbff", "#c6dbef", "#6baed6", "#3182bd", "#08519c"],
    vmin=bins[0], vmax=bins[-1],
    index=bins,
    caption="Notar√≠as por distrito (Provincia de Lima)"
)

def style_fn(feature):
    n = feature["properties"].get("N_Notarias", 0)
    return {"color":"#555", "weight":1, "fillOpacity":0.55, "fillColor": cmap(n)}

tooltip_fields = []
aliases = []
if COL_DIST_GEO: tooltip_fields.append(COL_DIST_GEO); aliases.append("Distrito")
tooltip_fields.append("N_Notarias"); aliases.append("Notar√≠as")

GeoJson(
    data=gdf_plot.to_json(),
    name="Distritos (Provincia Lima)",
    style_function=style_fn,
    tooltip=GeoJsonTooltip(fields=tooltip_fields, aliases=aliases, sticky=True)
).add_to(m)

# A√±adir leyenda
cmap.add_to(m)

# ---- Marcadores (casitas) por notar√≠a ----
for _, r in df_lm.iterrows():
    popup = folium.Popup(
        f"<b>{r['nombre_mostrar']}</b><br>{r['direccion']}<br><i>{r[COL_DIST]}</i>",
        max_width=300
    )
    folium.Marker(
        [r["lat"], r["lon"]],
        tooltip=f"{r['nombre_mostrar']} ‚Äì {r[COL_DIST]}",
        popup=popup,
        icon=folium.Icon(color="blue", icon="home", prefix="fa")
    ).add_to(m)

folium.LayerControl(collapsed=False).add_to(m)
m.save(SALIDA_HTML)
print("\n‚úÖ Mapa exportado:", SALIDA_HTML)
print("üè† Notar√≠as mapeadas (Provincia Lima):", len(df_lm))
print("üìù CSV generado: conteo_notarias_lima.csv")







